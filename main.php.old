<?php

try {
     require_once 'eroc.php';
     createODTbl($db, '+');
    }
catch (PDOException $e)
    {
     if (preg_match("/already exists/", $e->getMessage()) != 1)
        {
	 loog($e);
	 echo json_encode(array('cmd' => 'INFO', 'error' => $e->getMessage()));
         exit;
	}
    }

try {
     $input = json_decode(file_get_contents("php://input"), true);
     initGlobals();
     
     switch ($input['cmd'])
	    {
	     case 'GETMAIN':
		  if ($input['OD'] == '') $output = array('cmd' => 'INFO', 'error' => 'Please select Object Database');
		   else $output = getOD($db);
		  break;
	     case 'GETMENU':
		  $query = $db->prepare("SHOW TABLES");
		  $query->execute();
		  $out = array(array('+', 0));
		  // Searching OD from sql table list by the '$' as a first character.
		  foreach ($query->fetchAll(PDO::FETCH_NUM) as $table)
		  if (substr($table[0], 0, 1) == "$" && substr($table[0], -1) != "$")
		     {
		      // Object with id2=1 and column id3 identifies the table as a OD name 
		      $query = $db->prepare("SELECT id3 FROM `$table[0]` WHERE id2=1");
		      $query->execute();
		      if (count($elements = $query->fetchAll(PDO::FETCH_NUM)) == 1 && substr($table[0], 1) != '+')
			 {
			  $out[] = array(substr($table[0], 1), 0);
			  // Searching OV from every table with 'Object View' lines present
			  $query = $db->prepare("SELECT id3 FROM `$table[0]` WHERE id3 LIKE 'View\n%'"); 
			  $query->execute(); 
			  foreach ($query->fetchAll(PDO::FETCH_NUM) as $name)
				  if ($view = preg_split("/\n/i", $name[0])[1]) $out[] = array($view, 1);
			 }
		     }
		  $output = array('cmd' => 'REFRESHMENU', 'data' => $out);
		  break;
	     case 'NEWOBJECT':
	          if ($OD == '+')
		     {
		      $output = array('cmd' => 'INFO', 'alert' => "Default database cannot be changed!");
		     }
		   else if (($columns = count($elements = getObjectElementIdentificators($db, $DOD))) > 0)
		     {
		      if (isset($input['data'])) $data = $input['data'];
		       else $data = array();
		      $input['cmd'] = 'NEWOBJECT';
		      $input['oId'] = -1;
		      $output['data'] = [];
		      $j = 0;
		      for ($i = 0; $i < $columns; $i++)
			  {
			   // Current element id is $elements[$i][0]
			   $input['eId'] = $elements[$i][0];
			   if (isset($data[$input['eId']])) $input['data'] = $data[$input['eId']];
			    else $input['data'] = '';
			   $out = elementHandler($db);
			   if ($out['cmd'] == 'SET' && (isset($out['data']) || isset($out['service'])))
			      {
			       $output['data'][$j] = ['eId' => $input['eId']];
			       if (isset($out['data'])) $output['data'][$j]['data'] = $out['data'];
			       if (isset($out['service'])) $output['data'][$j]['service'] = $out['service'];
			       $j++;
			      }
			  }
		      if (($res = writeNewObject($db, $OD, $output['data'])) > 0)
		         $output = array('cmd' => 'REFRESH', 'OD' => $input['OD'], 'OV' => $input['OV']);
		       else
		         $output = array('cmd' => 'INFO', 'alert' => $res);
		     }
		   else $output = array('cmd' => 'INFO', 'error' => 'No elements found!');
		  break;
	     case 'DELETEOBJECT':
	          if ($OD == '+' || ($input['oId'] == 2 && substr($OD, 0, 1) == '$'))
		     {
		      $output = array('cmd' => 'INFO', 'alert' => "Default database cannot be changed!");
		     }
		   else
		     {
		      if ($input['oId'] == 1 && substr($OD, 0, 1) == '$')
		         {
			  // Calculating substr($OD, 1) first object with minimal id
			  $query = $db->prepare("SELECT id2 FROM `".substr($OD, 1)."` ORDER BY id2 LIMIT 1");
			  $query->execute();
			  $input['oId'] = intval($query->fetch(PDO::FETCH_NUM)[0]);
			  // If success and OD has at least one element then pass 'DELETEOBJECT' command to every element of this first found object
			  if ($input['oId'] > 0 && ($columns = count($elements = getObjectElementIdentificators($db, $OD))) > 0)
			     {
			      $DOD = $OD;
			      for ($i = 0; $i < $columns; $i++)
			          {
				   $input['eId'] = $elements[$i][0];
			    	   elementHandler($db);
				  }
			      $DOD = '+$';
			     }
			  // Flushing all sql tables for that OD - OD itself and OD version, OD description and OD description version.
			  $query = $db->prepare("DROP TABLE `$OD`; DROP TABLE `$OD"."\$`; DROP TABLE `".substr($OD, 1)."`; DROP TABLE `".substr($OD, 1)."\$`");
			  $query->execute();
			  $output = array('cmd' => 'REFRESH', 'OD' => '', 'OV' => '');
			 }
		       else if (($columns = count($elements = getObjectElementIdentificators($db, $DOD))) > 0)
		         {
			  // Check all elements
			  for ($i = 0; $i < $columns; $i++)
			      {
			       $input['eId'] = $elements[$i][0];
			       $out = elementHandler($db);
			      }
			  // Element data class delete in child OD and OD$
			  if (substr($OD, 0, 1) == '$' && ($element = elementGet($db, $OD, 3, $input['oId'])))
			  if (preg_match("/^Element\n/", $element))
			     {
			      try {
			    	   $query = $db->prepare("ALTER TABLE `".substr($OD, 1)."` DROP COLUMN id".$input['oId'].", DROP COLUMN sid".$input['oId']);
			    	   $query->execute();
			           $query = $db->prepare("ALTER TABLE `".substr($OD, 1)."\$` DROP COLUMN id".$input['oId'].", DROP COLUMN sid".$input['oId']);
			           $query->execute();
				  }
			      catch (PDOException $e)
			          {
				   loog ($e->getMessage());
				  }
			     }
			  // Deleting object
			  if (($res = deleteObject($db, $OD, $input['oId'])) === true)
			     $output = array('cmd' => 'REFRESH', 'OD' => $input['OD'], 'OV' => $input['OV']);
			   else 
			     $output = array('cmd' => 'INFO', 'alert' => $res);
			 }
		       else $output = array('cmd' => 'INFO', 'error' => 'No elements found!');
		     }
		  break;
	     case 'DBLCLICK':
	     case 'F2':
	     case 'F12':
	     case 'INS':
	     case 'DEL':
	     case 'KEYPRESS':
	     case 'CONFIRM':
	          // For every element in 'plus' OD except id 4 (new OD input) or elements id 2,3 (Data class, name) in any DOD - do nothing
	          if (($OD == '+' && $input['eId'] != 3) || ($input['OV'] == '' && $input['oId'] == 1 && $input['eId'] == 3 && $OD != '+'))
		     {
		      $output = array('cmd' => '');
		      break;
		     }
		  
		  // Analyze element handler system commands
		  $output = elementHandler($db);
		  switch ($output['cmd'])
		     {
		      case 'NEWOD':
	        	    if ($input['OD'] == '+' && isset($output['data']))
		    	       {
		    		if (($name = preg_split("/\n/i", $output['data'])[1]) && preg_match("/[^0-9a-zA-Z_]/", $name))
				   $output = array('cmd' => 'SET', 'data' => [['oId' => $input['oId'], 'eId' => $input['eId'], 'data' => "Database\n\n"]], 'alert' => "Failed to create '".$name."' object database!");
		    		 else
				   {
				    createODTbl($db, $name);
				    $output = array('cmd' => 'REFRESH', 'OD' => $name, 'OV' => '');
				   }
		    		}
			     else $output = array('cmd' => 'SET', 'data' => array(array('oId' => $input['oId'], 'eId' => $input['eId'], 'data' => elementGet($db, $OD, $input['eId'], $input['oId']))));
			   break;
		      case 'NEWOV':
		           // Breaking for non DOD
		           if ($input['OV'] != '')
			      {
			       $output = array('cmd' => 'INFO', 'log' => 'NEWOV command not allowed!');
			       break;
			      }
			   // Adding new OV for non plus/empty OD
	        	   if ($input['OD'] != '+')
			   if ($newView = preg_split("/\n/i", $output['data'])[1])
			   if ($newView = preg_replace("/ +/", ' ', preg_replace("/^ +/", '', preg_replace("/ +$/", '', $newView))))
		    	      {
			       // Extracting all current views
		    	       $query = $db->prepare("SELECT id3 FROM `$OD` WHERE id3 LIKE 'View\n%'");
		    	       $query->execute();             
			       // Comparing them with the new OV                                          
			       foreach ($query->fetchAll(PDO::FETCH_NUM) as $j) 
			    	       if ($view = preg_split("/\n/i", $j[0])[1])
				       if ($view == $newView)
					  {
					   $newView = '';
					   break;
					  }
			       // In case of absence $name among current views - add new OV
			       $output = ['data' => [['oId' => $input['oId'], 'eId' => $input['eId'], 'data' => $output['data']]]];
			       if ($newView != '' && writeExistingObject($db, $OD, $input['oId']) > 0)
				  {
				   $output['cmd'] = 'SET';
				   $output['refreshMenu'] = true;
				   break;
				  }
			      }
			   $output = array('cmd' => 'SET', 'alert' => 'Object view already exists or incorrect view name!', 'data' => array(array('oId' => $input['oId'], 'eId' => $input['eId'], 'data' => elementGet($db, $OD, $input['eId'], $input['oId']))));
			   break;
		      case 'NEWELEMENT':
		           // Breaking for non DOD..
		           if ($input['OV'] != '')
			      {
			       $output = array('cmd' => 'INFO', 'log' => 'NEWELEMENT command not allowed!');
			       break;
			      }
			   // Updating DOD object with the new element data class
			   $output = [];
			   $output['data'] = [['oId' => $input['oId'], 'eId' => $input['eId'], 'data' => $output['data']]];
			   if (($res = writeExistingObject($db, $OD, $input['oId'], true, false)) > 0)
			      {
			       $output['cmd'] = 'SET';
			       try {
			    	    // New column for $OD
				    if (preg_split("/\n/i", $output['data'][0]['data'])[2] == 'uniq')
	        		       {
	        			$query = $db->prepare("ALTER TABLE `".$input['OD']."` add id".$input['oId']." varbinary(190), add sid".$input['oId']." text");
			    		$query->execute();
				        $query = $db->prepare("ALTER TABLE `".$input['OD']."` ADD UNIQUE(id".$input['oId']."(190))");
					$query->execute(); 
				       }
				     else
	        		       {
	    				$query = $db->prepare("ALTER TABLE `".$input['OD']."` add id".$input['oId']." text, add sid".$input['oId']." text");
					$query->execute();
				       }
			    	    // New column for $ODS
	        	    	    $query = $db->prepare("ALTER TABLE `".$input['OD']."\$` add id".$input['oId']." text, add sid".$input['oId']." text");
			    	    $query->execute();
				   } 
			       catch(PDOException $e)
				   {
				    loog ($e->getMessage());
				    $output = array('cmd' => 'INFO', 'alert' => "Can't create object database new element!");
				    $query = $db->prepare("ROLLBACK");
				    $query->execute();              
				    break;
				   }
			       $query = $db->prepare("COMMIT");
			       $query->execute();
			      }
			    else $output = array('cmd' => 'INFO', 'alert' => $res);
			   break;
		      case 'SET':
		           // Break in case of undefined output data (case is used to undo editable content)
		           if (!isset($output['data']))
			      {
			       $output['cmd'] = '';
			       break;
			      }
			   if (!isset($globalElementIds)) getGlobalElementIds($db);
			   // Fix initiated SET command element Id and its data
			   if (isset($globalElementIds[$input['eId']])) $tmpData = [['eId' => ($id = $input['eId'])]];
			    else $tmpData = [['oId' => $input['oId'], 'eId' => ($id = $input['eId'])]];
			   if (isset($output['data'])) $tmpData[0]['data'] = $output['data'];
			   if (isset($output['service'])) $tmpData[0]['service'] = $output['service'];
			   $output = ['cmd' => 'SET', 'data' => $tmpData];
			   // Break in case of element write data fail
			   if (!(($version = writeExistingObject($db, $OD, $input['oId'], true, false)) > 1))
			      {
			       $output = array('cmd' => 'INFO', 'alert' => 'Failed to update element data: '.$version);
			       break;
			      }
			   // No elements - break
			   if (!(($columns = count($elements = getObjectElementIdentificators($db, $DOD))) > 0))
			      {
			       $output = array('cmd' => 'INFO', 'alert' => 'Database corrupted: no elements found!');
			       break;
			      }
			   // Set 'OBJCHANGE' command to handle all other elements
			   $input = ['oId' => $input['oId'], 'cmd' => 'OBJCHANGE'];
			   $tmpData = $output['data'];
			   $output['data'] = [];
			   $j = 0;
		    	   // Handle all other elements (all elements except the one initiated 'SET')
		           for ($i = 0; $i < $columns; $i++)
			   if ($id != $elements[$i][0])
			       {
			        // Current element id is $elements[$i][0]
				$input['eId'] = $elements[$i][0];
				$out = elementHandler($db);
				if ($out['cmd'] == 'SET' && (isset($out['data']) || isset($out['service'])))
				   {
				    if (isset($globalElementIds[$input['eId']]))
				       $output['data'][$j] = array('eId' => $input['eId']);
				     else
				       $output['data'][$j] = array('oId' => $input['oId'], 'eId' => $input['eId']);
				    if (isset($out['data'])) $output['data'][$j]['data'] = $out['data'];
				    if (isset($out['service'])) $output['data'][$j]['service'] = $out['service'];
				    $j++;
				   }
			       }
			   // Finish transaction and merge 1st element data with 'OBJCHANGE' command result array
			   if (writeExistingObject($db, $OD, $input['oId'], false, true, $version) > 1)
			      $output['data'] = array_merge($tmpData, $output['data']);
			   break;
		      case 'EDIT':
		    	   $output['oId'] = $input['oId'];
		    	   $output['eId'] = $input['eId'];
			   break;
		      case 'INFO': //'INFO' cmd consists of other data (log, error, alert) to dispatch it to the client browser, so output array is unchanged
			   break;
		      case 'UNDEFINED':
			   $output = array('cmd' => 'INFO', 'log' => 'Undefined handler command!');
			   break;
		      case '':
			   break;
		      default:
			   $output = array('cmd' => 'INFO', 'alert' => "Unknown handler command: '$output[cmd]'!");
		     }
		  if ($input['cmd'] == 'CONFIRM' && $output['cmd'] != 'SET' && $output['cmd'] != 'REFRESH')
		     {
		      $output['cmd'] = 'SET';
		      $output['data'] = [['oId' => $input['oId'], 'eId' => $input['eId'], 'data' => elementGet($db, $OD, $input['eId'], $input['oId'])]];
		     }
		  break;
	     default:
	          $output = array('cmd' => 'INFO', 'alert' => 'Unknown browser event!');
	    }
     echo json_encode($output);
    }
     
catch (PDOException $e)
    {
     loog($e);
     switch ($input['cmd'])
    	    {
	     case 'GETMAIN':
	          echo json_encode(['cmd' => 'INFO', 'error' => 'Failed to display object view!', 'log' => $e->getMessage()]);
		  break;
	     case 'GETMENU':
	          echo json_encode(['cmd' => 'INFO', 'error' => 'Failed to display main menu!', 'log' => $e->getMessage()]);
		  break;
	     case 'NEWOBJECT':
	          echo json_encode(['cmd' => 'INFO', 'alert' => 'Failed to add new object!', 'log' => $e->getMessage()]);
		  break;
	     case 'DELETEOBJECT':
	          echo json_encode(['cmd' => 'INFO', 'alert' => 'Failed to delete object!', 'log' => $e->getMessage()]);
		  break;
	     default:
	          if (!(isset($output) && isset($output['cmd'])))
		     {
		      echo json_encode(['cmd' => 'INFO', 'error' => 'Unknown error: '.$e->getMessage()]);
		      break;
		     }
	          switch ($output['cmd'])
			 {
			  case 'NEWOD':
	        	       echo json_encode(['cmd' => 'INFO', 'alert' => "Failed to create '".$output['data']."' object database!"]);
			       break;
			  case 'NEWOV':
			       echo json_encode(['cmd' => 'INFO', 'alert' => 'Failed to create new object view!', 'log' => $e->getMessage()]);
			       break;
			  case 'NEWELEMENT':
			       echo json_encode(['cmd' => 'INFO', 'alert' => 'Failed to create new element!', 'log' => $e->getMessage()]);
			       break;
			  case 'SET':
			       echo json_encode(['cmd' => 'INFO', 'alert' => 'Failed to update element data!', 'log' => $e->getMessage()]);
			       break;
			  default:
			       echo json_encode(['cmd' => 'INFO', 'error' => 'Unknown error: '.$e->getMessage()]);
			 }
	    }
    }

function elementHandler($db)
{ 
 global $DOD, $input;
 
 if ($eh = elementGet($db, $DOD, '3', $input['eId'])) // Search handler for the specified element from DOD sql table by element id 7 and OD object id $input['eId']
 if ($eh = preg_split("/\n/", $eh)) // Split the result by lines to extract array first element as a handler name
 if ($in = elementProcessSearch($db, $input['oId'], $input['eId'], $input['cmd']))   // Search element process by $input['cmd']
    {
     if (isset($input['data'])) $in['data'] = $input['data'];
     return callHandler($in, $eh[1]);
    }
  else
    {
     return array('cmd' => 'INFO', 'log' => "Element process '$input[cmd]' for specified handler not found!");
    }
 return array('cmd' => 'INFO', 'alert' => 'Handler function for the specified element not found!');
}

function callHandler($in, $eh)
{
 include "./functions/$eh";
 if (isset($out))
 if (is_array($out) && isset($out['cmd'])) return $out;
 return array('cmd' => 'UNDEFINED');
}

function elementProcessSearch($db, $oId, $eId, $process)
{
 // Function search specified process $process in DOD sql table for element $eId
 global $DOD, $OD, $ODS, $globalElementIds;
 
 // Check for right values of object and element identificators
 if (!(isset($oId) && ($oId == -1 || $oId > 0)) || !(isset($eId) && $eId > 1)) return false;
 
 // Select object $eId from DOD sql table to get handler process vars
 $query = $db->prepare("SELECT id6,id7,id8,id9,id10,id11,id12,id13,id14,id15,id16,id17,id18 FROM `$DOD` WHERE id2=$eId");
 $query->execute();
 if (!(count($elements = $query->fetch(PDO::FETCH_NUM)) > 0)) return false;

 // Checking result all fields
 foreach ($elements as $value)
 if (isset($value))
 if (($vars = preg_split("/\n/i", $value))[0] == $process) // Found first line matched process?
    {
     for ($j = 1; $j < count($vars); $j++) // Checking every line of an element
         {
	  if (preg_match('/^\[\d{1,5}\]/', $vars[$j])) // One to five digit chars in square brackets? Inserting element main data
	     {
	      if (!isset($globalElementIds)) getGlobalElementIds($db);
	      $vars[$j] = strval(substr($vars[$j], 1, -1)); // Calculating requested element id
	      if (isset($globalElementIds[$vars[$j]]))
	         {
		  $query = $db->prepare("SELECT id2 FROM `$OD` ORDER BY id2 LIMIT 1"); // Calculating global element id
		  $query->execute();
		  $vars[$j] = elementGet($db, $OD, $vars[$j], $query->fetch(PDO::FETCH_NUM)[0]);
		 }
	       else
		 {
	          $vars[$j] = elementGet($db, $OD, $vars[$j], $oId);
		 }
	     }
	   else
	     {
	      if (preg_match('/^\{\d{1,5}\}/', $vars[$j])) // One to five digit chars in figure brackets? Inserting element service data
		 {
		  if (!isset($globalElementIds)) getGlobalElementIds($db);
		  $vars[$j] = strval(substr($vars[$j], 1, -1)); // Calculating requested element id
		  if (isset($globalElementIds[$vars[$j]]))
		     {
		      $query = $db->prepare("SELECT id2 FROM `$OD` ORDER BY id2 LIMIT 1"); // Calculating global element id
		      $query->execute();
		      $vars[$j] = elementGet($db, $OD, $vars[$j], $query->fetch(PDO::FETCH_NUM)[0], 1);
		     }
		   else
		     {
		      $vars[$j] = elementGet($db, $OD, $vars[$j], $oId, 1);
		     }
		 }
	       else if (preg_match('/^\(\d{1,5}\)/', $vars[$j])) // One to five digit chars in round brackets? Inserting element title
		 {
		  $vars[$j] = elementGet($db, $DOD, 3, strval(substr($vars[$j], 1, -1)));
		  $vars[$j] = preg_split("/\n/i", $vars[$j], 4)[3];
		 }
	     }
	  if ($vars[$j] === false || $vars[$j] == NULL) $vars[$j] = '';
         }
     return $vars; // Extra check for element id existance and its protected status should be performed
    }
 if ($process == 'CONFIRM') return ['CONFIRM'];
 return false;
}

function elementGet($db, $table, $eId, $oId, $flag = 0, $version = NULL)
{
 // Function returns element $eId of object $oId with version $version from sql table $table. Failed operation returns false;
 $versionQuery = $orderQuery = '';
 if (isset($version))
 if ($version > 0) $versionQuery = "AND version=$version";
  else $orderQuery = "ORDER BY version desc LIMIT 1";
 
 switch ($flag)
	{
    	 case 0: // Select main element data
	      $query = $db->prepare("SELECT id$eId FROM `$table` $orderQuery WHERE id2=$oId $versionQuery");
	      break;
	 case 1: // Select service element data
	      $query = $db->prepare("SELECT sid$eId FROM `$table` $orderQuery WHERE id2=$oId $versionQuery");
	      break;
    	 default: // undefined flag
	      return false;
	}
	
 $query->execute();
 if ($element = $query->fetch(PDO::FETCH_NUM)) if (count($element) > 0) return $element[0];
 return false;
}

function getOD ($db, $pageNumber = 1, $objNumber = 3)
{
 global $DOD, $OD, $OV, $globalElementIds;
 if (!isset($globalElementIds)) getGlobalElementIds($db);
 
 // Selecting id5 behaviur field from DOD
 $query = $db->prepare("SELECT id5 FROM `$DOD` WHERE id3 LIKE 'View\n$OV\n%'");
 $query->execute();
 if (!is_array($format = $query->fetch(PDO::FETCH_NUM))) return ['cmd' => 'INFO', 'error' => 'Database corrupted, object view not found!'];
 $format = $format[0];
 
 // Selecting elements identificators and its descriptions (headers) from DOD id3 column
 $query = $db->prepare("SELECT id2,id3,id4 FROM `$DOD` WHERE id3 LIKE 'Element\n%\n%\n%'");
 $query->execute();
 if (!($columns = count($elements = $query->fetchAll(PDO::FETCH_NUM)))) return ['cmd' => 'INFO', 'error' => 'Database corrupted, no elements found!'];
    
 // Split format data by lines to parse on element identificators defined
 foreach (preg_split("/\n/", $format) as $value)
	 if (($j = json_decode($value, true)))
	 if (isset($j['eId']))
	    $definedElementIds[intval($j['eId'])] = '';
 
 // Return in case of no element identificators found
 if (!isset($definedElementIds)) return ['cmd' => 'INFO', 'error' => 'Specified object view has no elements defined!'];

 // Generate column list from defined object elements
 $srvColumnList = $columnList = "id2";
 $j = 0;
 $globalDefinedElementIds = [];
 for ($i = 0; $i < $columns; $i++)
     if (isset($definedElementIds[$elements[$i][0]]))
        {
	 $srvHeader[0][$j] = $header[0][$j] = $elements[$i][0];
	 $header[1][$j] = preg_split("/\n/", $elements[$i][1], 4)[3];
	 if (isset($elements[$i][2])) $srvHeader[1][$j] = $elements[$i][2];
	 $columnList .= ",id".strval($elements[$i][0]);
	 $srvColumnList .= ",sid".strval($elements[$i][0]);
	 $j++;
	 if (isset($globalElementIds[$elements[$i][0]])) $globalDefinedElementIds[$elements[$i][0]] = $j;
	}
	
 // Exit in case of no defined elements found in DOD
 if ($j === 0) return ['cmd' => 'INFO', 'error' => 'Specified object view has no elements found!'];
 
 // Select column list
 $columnList = rmSQLinjectionChars($columnList);
 $query = $db->prepare("SELECT $columnList FROM `$OD`");
 $query->execute();
 $result = $query->fetchAll(PDO::FETCH_NUM);
 $srvColumnList = rmSQLinjectionChars($srvColumnList);
 $query = $db->prepare("SELECT $srvColumnList FROM `$OD`");
 $query->execute();
 $srvResult = $query->fetchAll(PDO::FETCH_NUM);

 // Setting global elements values
 foreach ($globalDefinedElementIds as $index => $value)
	 {
	  $query = $db->prepare("SELECT id$index,sid$index FROM `$OD` ORDER BY id2 LIMIT 1");
	  $query->execute();
	  $data = $query->fetchAll(PDO::FETCH_NUM);
	  $service = $data[0][1];
	  $data = $data[0][0];
	  for ($i = 0; $i < count($result); $i++)
	      {
	       $result[$i][$value] = $data;
	       $srvResult[$i][$value] = $service;
	      }
	 }
  
 // Pushing header and some extra fields to result array - status and format elements.
 $result = array_merge($header, $result);
 array_unshift($result[0], $format);
 array_unshift($result[1], '0');
 $srvResult = array_merge($srvHeader, $srvResult);
 array_unshift($srvResult[0], '');
 array_unshift($srvResult[1], '0');
 return ['cmd' => 'REFRESHMAIN', 'data' => $result, 'service' => $srvResult];
}

function getObjectElementIdentificators($db, $table)
{
 // Selecting all object element identificators from sql table $table
 $query = $db->prepare("SELECT id2 FROM `$table` WHERE id3 LIKE 'Element\n%\n%'");
 $query->execute();

 // Get identificators and return
 return $query->fetchAll(PDO::FETCH_NUM);
}
